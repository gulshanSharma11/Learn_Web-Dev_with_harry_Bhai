/**
 * @module node-alarm-dot-com
 */
import { AuthOpts } from './_models/AuthOpts';
import { ApiDeviceState } from './_models/DeviceStates';
import { IdentityResponse } from './_models/IdentityResponse';
import { PartitionActionOptions } from './_models/PartitionActionOptions';
import { FlattenedSystemState } from './_models/SystemState';
import { THERMOSTAT_STATES } from './_models/States';
export * from './_models/AuthOpts';
export * from './_models/DeviceStates';
export * from './_models/IdentityResponse';
export * from './_models/PartitionActionOptions';
export * from './_models/RequestOptions';
export * from './_models/SystemState';
export * from './_models/SensorType';
/**
 * Authenticate with alarm.com.
 * Returns an authentication object that can be passed to other methods.
 *
 * @param {string} username  Alarm.com username.
 * @param {string} password  Alarm.com password.
 * @param {string} existingMfaToken MFA token from browser used to bypass MFA.
 * @returns {Promise}
 */
export declare function login(username: string, password: string, existingMfaToken?: string): Promise<AuthOpts>;
/**
 * This function returns the alarm.com system identity for the currently logged in system.
 * The information returned is useful for finding current systems and global config.
 */
export declare function getIdentitiesState(loginCookies: string, ajaxKey: string): Promise<IdentityResponse>;
/**
 * Retrieve information about the current state of a security system including
 * attributes, partitions, accessory components and relationships.
 *
 * @param {string} systemID  ID of the system to query. The Authentication
 *   object returned from the `login` method contains a `systems` property which
 *   is an array of system IDs.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @returns {Promise}
 */
export declare function getCurrentState(systemID: string, authOpts: AuthOpts): Promise<FlattenedSystemState>;
/**
 * Get information about groups of components e.g., sensors, lights, locks, garages, etc.
 *
 * @param {string} url  Base request url.
 * @param {string} componentIDs  Array of ID to retrieve.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @returns {Promise}
 */
export declare function getComponents(url: string, componentIDs: string[], authOpts: AuthOpts): Promise<ApiDeviceState>;
/**
 * Convenience Method:
 * Arm a security system panel in "stay" mode. NOTE: This call generally takes
 * 20-30 seconds to complete.
 *
 * @param {string} partitionID  Partition ID to arm.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @param {Object} opts  Optional arguments for arming the system.
 * @param {boolean} opts.noEntryDelay  Disable the 30-second entry delay.
 * @param {boolean} opts.silentArming  Disable audible beeps and double the exit
 *   delay.
 * @returns {Promise}
 */
export declare function armStay(partitionID: string, authOpts: AuthOpts, opts: PartitionActionOptions): Promise<any>;
/**
 * Convenience Method:
 * Arm a security system panel in "away" mode. NOTE: This call generally takes
 * 20-30 seconds to complete.
 *
 * @param {string} partitionID  Partition ID to arm.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @param {Object} opts  Optional arguments for arming the system.
 * @param {boolean} opts.noEntryDelay  Disable the 30-second entry delay.
 * @param {boolean} opts.silentArming  Disable audible beeps and double the exit
 *   delay.
 * @returns {Promise}
 */
export declare function armAway(partitionID: string, authOpts: AuthOpts, opts: PartitionActionOptions): Promise<any>;
/**
 * Convenience Method:
 * Disarm a security system panel. NOTE: This call generally takes 20-30 seconds
 * to complete.
 *
 * @param {string} partitionID  Partition ID to disarm.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @returns {Promise}
 */
export declare function disarm(partitionID: string, authOpts: AuthOpts): Promise<any>;
/**
 * Convenience Method:
 * Sets a light to ON and adjusts brightness level (1-100) of dimmable lights.
 *
 * @param {string} lightID  Light ID string.
 * @param {number} brightness  An integer, 1-100, indicating brightness.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @param {boolean} isDimmer  Indicates whether or not light is dimmable.
 * @returns {Promise}
 */
export declare function setLightOn(lightID: string, authOpts: AuthOpts, brightness: number, isDimmer: boolean): Promise<any>;
/**
 * Convenience Method:
 * Sets a light to OFF. The brightness level is ignored.
 *
 * @param {string} lightID  Light ID string.
 * @param {number} brightness  An integer, 1-100, indicating brightness. Ignored.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @param {boolean} isDimmer  Indicates whether or not light is dimmable.
 * @returns {Promise}
 */
export declare function setLightOff(lightID: string, authOpts: AuthOpts, brightness: number, isDimmer: boolean): Promise<any>;
/**
 * Convenience Method:
 * Sets a lock to "locked" (SECURED).
 *
 * @param {string} lockID  Lock ID string.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @returns {Promise}
 */
export declare function setLockSecure(lockID: string, authOpts: AuthOpts): Promise<any>;
/**
 * Convenience Method:
 * Sets a lock to "unlocked" (UNSECURED).
 *
 * @param {string} lockID  Lock ID string.
 * @param {Object} authOpts  Authentication object returned from the login.
 * @returns {Promise}
 */
export declare function setLockUnsecure(lockID: string, authOpts: AuthOpts): Promise<any>;
/**
 * Sets a garage to CLOSED.
 *
 *
 * @param {string} garageID Lock ID string.
 * @param {Object} authOpts Authentication object returned from the `login`
 *   method.
 * @returns {Promise}
 */
export declare function closeGarage(garageID: string, authOpts: AuthOpts): Promise<any>;
/**
 * Sets a garage to OPEN.
 *
 * @param {string} garageID Lock ID string.
 * @param {Object} authOpts Authentication object returned from the `login`
 *   method.
 * @returns {Promise}
 */
export declare function openGarage(garageID: string, authOpts: AuthOpts): Promise<any>;
/**
 * Update thermostat state
 *
 * @param {string} thermostatID Thermostat ID string.
 * @param {Object} newState New desired state
 * @param {Object} authOpts Authentication object returned from the `login`
 *   method.
 * @returns {Promise}
 */
export declare function setThermostatState(thermostatID: string, newState: THERMOSTAT_STATES, authOpts: AuthOpts): Promise<any>;
/**
 * Sets a thermostat target heat temperature.
 *
 * @param {string} thermostatID ThermostatID ID string.
 * @param {number} newTemp New target temperature
 * @param {Object} authOpts Authentication object returned from the `login`
 *   method.
 * @returns {Promise}
 */
export declare function setThermostatTargetHeatTemperature(thermostatID: string, newTemp: number, authOpts: AuthOpts): Promise<any>;
/**
 * Sets a thermostat target cool temperature.
 *
 * @param {string} thermostatID ThermostatID ID string.
 * @param {number} newTemp New target temperature
 * @param {Object} authOpts Authentication object returned from the `login`
 *   method.
 * @returns {Promise}
 */
export declare function setThermostatTargetCoolTemperature(thermostatID: string, newTemp: number, authOpts: AuthOpts): Promise<any>;
export declare function authenticatedGet(url: string, opts: any): Promise<any>;
export declare function authenticatedPost(url: string, opts: any): Promise<any>;
